/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CryptoLinkerDepositoryInterface extends ethers.utils.Interface {
  functions: {
    "adjustments(uint256)": FunctionFragment;
    "authority()": FunctionFragment;
    "claimAndExercise(address,uint256[])": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "create(address,address,uint256[7],uint256[3],uint32[2])": FunctionFragment;
    "currentLeverage(uint256)": FunctionFragment;
    "daoReward()": FunctionFragment;
    "deposit(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "exercise(address,uint256[])": FunctionFragment;
    "exerciseAll(address)": FunctionFragment;
    "getLatestPriceData(address)": FunctionFragment;
    "getReward()": FunctionFragment;
    "indexesFor(address)": FunctionFragment;
    "isLive(uint256)": FunctionFragment;
    "leverageIncrement(uint256)": FunctionFragment;
    "liveMarkets()": FunctionFragment;
    "liveMarketsFor(address)": FunctionFragment;
    "marketPrice(uint256)": FunctionFragment;
    "markets(uint256)": FunctionFragment;
    "marketsForQuote(address,uint256)": FunctionFragment;
    "metadata(uint256)": FunctionFragment;
    "payoutFor(uint256,uint256)": FunctionFragment;
    "pendingFor(address,uint256)": FunctionFragment;
    "pullTerms(address,uint256)": FunctionFragment;
    "pushTerms(address,uint256)": FunctionFragment;
    "refReward()": FunctionFragment;
    "req()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setRewards(uint256,uint256)": FunctionFragment;
    "terms(uint256)": FunctionFragment;
    "updateTreasury()": FunctionFragment;
    "userTerms(address,uint256)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "whitelisted(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adjustments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimAndExercise",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "close", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      string,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentLeverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "daoReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exercise",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "exerciseAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getLatestPriceData",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(functionFragment: "indexesFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isLive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leverageIncrement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liveMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liveMarketsFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketsForQuote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "metadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutFor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pullTerms",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pushTerms",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "refReward", values?: undefined): string;
  encodeFunctionData(functionFragment: "req", values?: undefined): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "terms", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userTerms",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;
  encodeFunctionData(functionFragment: "whitelisted", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "adjustments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAndExercise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exercise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exerciseAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "indexesFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leverageIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liveMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liveMarketsFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketsForQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pullTerms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushTerms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "req", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "terms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTerms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelisted",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "CloseMarket(uint256)": EventFragment;
    "CreateMarket(uint256,address,address,uint256)": EventFragment;
    "CryptoLinker(uint256,uint256,uint256)": EventFragment;
    "ReferencePriceUpdated(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CryptoLinker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferencePriceUpdated"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<
  [string] & { authority: string }
>;

export type CloseMarketEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type CreateMarketEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    id: BigNumber;
    baseToken: string;
    asset: string;
    initialPrice: BigNumber;
  }
>;

export type CryptoLinkerEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    id: BigNumber;
    amount: BigNumber;
    notional: BigNumber;
  }
>;

export type ReferencePriceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    id: BigNumber;
    oldPrice: BigNumber;
    newPrice: BigNumber;
  }
>;

export class CryptoLinkerDepository extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CryptoLinkerDepositoryInterface;

  functions: {
    adjustments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, boolean] & {
        referencePrice: BigNumber;
        change: BigNumber;
        lastAdjustment: number;
        timeToAdjusted: number;
        active: boolean;
      }
    >;

    authority(overrides?: CallOverrides): Promise<[string]>;

    claimAndExercise(
      _user: string,
      _indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    close(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create(
      _asset: string,
      _underlyingOracle: string,
      _market: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _terms: [BigNumberish, BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentLeverage(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    daoReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _id: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _timeSlippage: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exercise(
      _user: string,
      _indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exerciseAll(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLatestPriceData(
      _feed: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    indexesFor(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isLive(_id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    leverageIncrement(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liveMarkets(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    liveMarketsFor(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    marketPrice(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _refPrice: BigNumber }>;

    markets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        capacity: BigNumber;
        asset: string;
        index: string;
        strike: BigNumber;
        digitalPayout: BigNumber;
        totalDebt: BigNumber;
        maxPayout: BigNumber;
        sold: BigNumber;
        purchased: BigNumber;
        floor: BigNumber;
        maxDebt: BigNumber;
        vesting: number;
        conclusion: number;
      }
    >;

    marketsForQuote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    metadata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, number, number, number, number] & {
        lastReferencePrice: BigNumber;
        lastReferenceBondPrice: BigNumber;
        lastTune: number;
        lastDecay: number;
        marketLength: number;
        depositInterval: number;
        tuneInterval: number;
        assetDecimals: number;
      }
    >;

    payoutFor(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingFor(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        payout_: BigNumber;
        matured_: boolean;
        payoffClaimable_: boolean;
      }
    >;

    pullTerms(
      _from: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushTerms(
      _to: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    req(overrides?: CallOverrides): Promise<[string]>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewards(
      _toFrontEnd: BigNumberish,
      _toDAO: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    terms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, number, number] & {
        currentLeverage: BigNumber;
        targetLeverage: BigNumber;
        maxDebt: BigNumber;
        vesting: number;
        conclusion: number;
        exerciseDuration: number;
        lastUpdate: number;
      }
    >;

    updateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userTerms(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        cryptoIntitialPrice: BigNumber;
        cryptoClosingPrice: BigNumber;
        baseNotional: BigNumber;
        bondPrice: BigNumber;
        created: number;
        matured: number;
        redeemed: number;
        exercised: number;
        marketId: number;
        notionalClaimed: number;
      }
    >;

    whitelist(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  adjustments(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number, boolean] & {
      referencePrice: BigNumber;
      change: BigNumber;
      lastAdjustment: number;
      timeToAdjusted: number;
      active: boolean;
    }
  >;

  authority(overrides?: CallOverrides): Promise<string>;

  claimAndExercise(
    _user: string,
    _indexes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  close(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create(
    _asset: string,
    _underlyingOracle: string,
    _market: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _terms: [BigNumberish, BigNumberish, BigNumberish],
    _intervals: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentLeverage(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  daoReward(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _id: BigNumberish,
    _amount: BigNumberish,
    _maxPrice: BigNumberish,
    _timeSlippage: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exercise(
    _user: string,
    _indexes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exerciseAll(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLatestPriceData(
    _feed: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  getReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  indexesFor(_user: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  isLive(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  leverageIncrement(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liveMarkets(overrides?: CallOverrides): Promise<BigNumber[]>;

  liveMarketsFor(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  marketPrice(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  markets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number
    ] & {
      capacity: BigNumber;
      asset: string;
      index: string;
      strike: BigNumber;
      digitalPayout: BigNumber;
      totalDebt: BigNumber;
      maxPayout: BigNumber;
      sold: BigNumber;
      purchased: BigNumber;
      floor: BigNumber;
      maxDebt: BigNumber;
      vesting: number;
      conclusion: number;
    }
  >;

  marketsForQuote(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  metadata(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number, number, number, number, number] & {
      lastReferencePrice: BigNumber;
      lastReferenceBondPrice: BigNumber;
      lastTune: number;
      lastDecay: number;
      marketLength: number;
      depositInterval: number;
      tuneInterval: number;
      assetDecimals: number;
    }
  >;

  payoutFor(
    _amount: BigNumberish,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingFor(
    _user: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, boolean] & {
      payout_: BigNumber;
      matured_: boolean;
      payoffClaimable_: boolean;
    }
  >;

  pullTerms(
    _from: string,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushTerms(
    _to: string,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refReward(overrides?: CallOverrides): Promise<BigNumber>;

  req(overrides?: CallOverrides): Promise<string>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewards(
    _toFrontEnd: BigNumberish,
    _toDAO: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  terms(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number, number, number] & {
      currentLeverage: BigNumber;
      targetLeverage: BigNumber;
      maxDebt: BigNumber;
      vesting: number;
      conclusion: number;
      exerciseDuration: number;
      lastUpdate: number;
    }
  >;

  updateTreasury(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userTerms(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      number,
      number,
      number
    ] & {
      cryptoIntitialPrice: BigNumber;
      cryptoClosingPrice: BigNumber;
      baseNotional: BigNumber;
      bondPrice: BigNumber;
      created: number;
      matured: number;
      redeemed: number;
      exercised: number;
      marketId: number;
      notionalClaimed: number;
    }
  >;

  whitelist(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    adjustments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, boolean] & {
        referencePrice: BigNumber;
        change: BigNumber;
        lastAdjustment: number;
        timeToAdjusted: number;
        active: boolean;
      }
    >;

    authority(overrides?: CallOverrides): Promise<string>;

    claimAndExercise(
      _user: string,
      _indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    create(
      _asset: string,
      _underlyingOracle: string,
      _market: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _terms: [BigNumberish, BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentLeverage(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoReward(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _id: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _timeSlippage: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exercise(
      _user: string,
      _indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exerciseAll(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPriceData(
      _feed: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getReward(overrides?: CallOverrides): Promise<void>;

    indexesFor(_user: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    isLive(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    leverageIncrement(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liveMarkets(overrides?: CallOverrides): Promise<BigNumber[]>;

    liveMarketsFor(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    marketPrice(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        capacity: BigNumber;
        asset: string;
        index: string;
        strike: BigNumber;
        digitalPayout: BigNumber;
        totalDebt: BigNumber;
        maxPayout: BigNumber;
        sold: BigNumber;
        purchased: BigNumber;
        floor: BigNumber;
        maxDebt: BigNumber;
        vesting: number;
        conclusion: number;
      }
    >;

    marketsForQuote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, number, number, number, number] & {
        lastReferencePrice: BigNumber;
        lastReferenceBondPrice: BigNumber;
        lastTune: number;
        lastDecay: number;
        marketLength: number;
        depositInterval: number;
        tuneInterval: number;
        assetDecimals: number;
      }
    >;

    payoutFor(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingFor(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        payout_: BigNumber;
        matured_: boolean;
        payoffClaimable_: boolean;
      }
    >;

    pullTerms(
      _from: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pushTerms(
      _to: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refReward(overrides?: CallOverrides): Promise<BigNumber>;

    req(overrides?: CallOverrides): Promise<string>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(
      _toFrontEnd: BigNumberish,
      _toDAO: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    terms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, number, number] & {
        currentLeverage: BigNumber;
        targetLeverage: BigNumber;
        maxDebt: BigNumber;
        vesting: number;
        conclusion: number;
        exerciseDuration: number;
        lastUpdate: number;
      }
    >;

    updateTreasury(overrides?: CallOverrides): Promise<void>;

    userTerms(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        cryptoIntitialPrice: BigNumber;
        cryptoClosingPrice: BigNumber;
        baseNotional: BigNumber;
        bondPrice: BigNumber;
        created: number;
        matured: number;
        redeemed: number;
        exercised: number;
        marketId: number;
        notionalClaimed: number;
      }
    >;

    whitelist(_operator: string, overrides?: CallOverrides): Promise<void>;

    whitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AuthorityUpdated(address)"(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    AuthorityUpdated(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    "CloseMarket(uint256)"(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    CloseMarket(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "CreateMarket(uint256,address,address,uint256)"(
      id?: BigNumberish | null,
      baseToken?: string | null,
      asset?: string | null,
      initialPrice?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        id: BigNumber;
        baseToken: string;
        asset: string;
        initialPrice: BigNumber;
      }
    >;

    CreateMarket(
      id?: BigNumberish | null,
      baseToken?: string | null,
      asset?: string | null,
      initialPrice?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        id: BigNumber;
        baseToken: string;
        asset: string;
        initialPrice: BigNumber;
      }
    >;

    "CryptoLinker(uint256,uint256,uint256)"(
      id?: BigNumberish | null,
      amount?: null,
      notional?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { id: BigNumber; amount: BigNumber; notional: BigNumber }
    >;

    CryptoLinker(
      id?: BigNumberish | null,
      amount?: null,
      notional?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { id: BigNumber; amount: BigNumber; notional: BigNumber }
    >;

    "ReferencePriceUpdated(uint256,uint256,uint256)"(
      id?: BigNumberish | null,
      oldPrice?: null,
      newPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { id: BigNumber; oldPrice: BigNumber; newPrice: BigNumber }
    >;

    ReferencePriceUpdated(
      id?: BigNumberish | null,
      oldPrice?: null,
      newPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { id: BigNumber; oldPrice: BigNumber; newPrice: BigNumber }
    >;
  };

  estimateGas: {
    adjustments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    claimAndExercise(
      _user: string,
      _indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    close(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create(
      _asset: string,
      _underlyingOracle: string,
      _market: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _terms: [BigNumberish, BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentLeverage(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoReward(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _id: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _timeSlippage: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exercise(
      _user: string,
      _indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exerciseAll(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLatestPriceData(
      _feed: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    indexesFor(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    isLive(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    leverageIncrement(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liveMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    liveMarketsFor(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketPrice(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    marketsForQuote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadata(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    payoutFor(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingFor(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pullTerms(
      _from: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushTerms(
      _to: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refReward(overrides?: CallOverrides): Promise<BigNumber>;

    req(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewards(
      _toFrontEnd: BigNumberish,
      _toDAO: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    terms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    updateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userTerms(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelist(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAndExercise(
      _user: string,
      _indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    close(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create(
      _asset: string,
      _underlyingOracle: string,
      _market: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _terms: [BigNumberish, BigNumberish, BigNumberish],
      _intervals: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentLeverage(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daoReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _id: BigNumberish,
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _timeSlippage: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exercise(
      _user: string,
      _indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exerciseAll(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLatestPriceData(
      _feed: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    indexesFor(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLive(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leverageIncrement(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liveMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liveMarketsFor(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketPrice(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketsForQuote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutFor(
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingFor(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pullTerms(
      _from: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushTerms(
      _to: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    req(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewards(
      _toFrontEnd: BigNumberish,
      _toDAO: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    terms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userTerms(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

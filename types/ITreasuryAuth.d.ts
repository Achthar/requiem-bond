/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITreasuryAuthInterface extends ethers.utils.Interface {
  functions: {
    "assetValue(address,uint256)": FunctionFragment;
    "baseSupply()": FunctionFragment;
    "deposit(uint256,address,uint256)": FunctionFragment;
    "excessReserves()": FunctionFragment;
    "governor()": FunctionFragment;
    "guardian()": FunctionFragment;
    "incurDebt(uint256,address)": FunctionFragment;
    "manage(address,uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "policy()": FunctionFragment;
    "repayDebtWithReserve(uint256,address)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "baseSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excessReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "incurDebt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "manage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "policy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repayDebtWithReserve",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "assetValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excessReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "incurDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayDebtWithReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "GovernorPulled(address,address)": EventFragment;
    "GovernorPushed(address,address,bool)": EventFragment;
    "GuardianPulled(address,address)": EventFragment;
    "GuardianPushed(address,address,bool)": EventFragment;
    "PolicyPulled(address,address)": EventFragment;
    "PolicyPushed(address,address,bool)": EventFragment;
    "VaultPulled(address,address)": EventFragment;
    "VaultPushed(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernorPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultPushed"): EventFragment;
}

export type GovernorPulledEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type GovernorPushedEvent = TypedEvent<
  [string, string, boolean] & {
    from: string;
    to: string;
    _effectiveImmediately: boolean;
  }
>;

export type GuardianPulledEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type GuardianPushedEvent = TypedEvent<
  [string, string, boolean] & {
    from: string;
    to: string;
    _effectiveImmediately: boolean;
  }
>;

export type PolicyPulledEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type PolicyPushedEvent = TypedEvent<
  [string, string, boolean] & {
    from: string;
    to: string;
    _effectiveImmediately: boolean;
  }
>;

export type VaultPulledEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type VaultPushedEvent = TypedEvent<
  [string, string, boolean] & {
    from: string;
    to: string;
    _effectiveImmediately: boolean;
  }
>;

export class ITreasuryAuth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITreasuryAuthInterface;

  functions: {
    assetValue(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value_: BigNumber }>;

    baseSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _amount: BigNumberish,
      _token: string,
      _profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excessReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    incurDebt(
      amount_: BigNumberish,
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manage(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    policy(overrides?: CallOverrides): Promise<[string]>;

    repayDebtWithReserve(
      amount_: BigNumberish,
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assetValue(
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: BigNumberish,
    _token: string,
    _profit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excessReserves(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  incurDebt(
    amount_: BigNumberish,
    token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manage(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  policy(overrides?: CallOverrides): Promise<string>;

  repayDebtWithReserve(
    amount_: BigNumberish,
    token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetValue(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _token: string,
      _profit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    excessReserves(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    incurDebt(
      amount_: BigNumberish,
      token_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    manage(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    policy(overrides?: CallOverrides): Promise<string>;

    repayDebtWithReserve(
      amount_: BigNumberish,
      token_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GovernorPulled(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    GovernorPulled(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "GovernorPushed(address,address,bool)"(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; to: string; _effectiveImmediately: boolean }
    >;

    GovernorPushed(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; to: string; _effectiveImmediately: boolean }
    >;

    "GuardianPulled(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    GuardianPulled(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "GuardianPushed(address,address,bool)"(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; to: string; _effectiveImmediately: boolean }
    >;

    GuardianPushed(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; to: string; _effectiveImmediately: boolean }
    >;

    "PolicyPulled(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    PolicyPulled(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "PolicyPushed(address,address,bool)"(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; to: string; _effectiveImmediately: boolean }
    >;

    PolicyPushed(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; to: string; _effectiveImmediately: boolean }
    >;

    "VaultPulled(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    VaultPulled(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "VaultPushed(address,address,bool)"(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; to: string; _effectiveImmediately: boolean }
    >;

    VaultPushed(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { from: string; to: string; _effectiveImmediately: boolean }
    >;
  };

  estimateGas: {
    assetValue(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseSupply(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _token: string,
      _profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excessReserves(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    incurDebt(
      amount_: BigNumberish,
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manage(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    policy(overrides?: CallOverrides): Promise<BigNumber>;

    repayDebtWithReserve(
      amount_: BigNumberish,
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetValue(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _token: string,
      _profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excessReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incurDebt(
      amount_: BigNumberish,
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manage(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    policy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repayDebtWithReserve(
      amount_: BigNumberish,
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

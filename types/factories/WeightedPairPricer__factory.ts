/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  WeightedPairPricer,
  WeightedPairPricerInterface,
} from "../WeightedPairPricer";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
      {
        internalType: "address",
        name: "_quote",
        type: "address",
      },
    ],
    name: "getTotalValue",
    outputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
      {
        internalType: "address",
        name: "_quote",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "slashedValuation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
      {
        internalType: "address",
        name: "_quote",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "valuation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061083c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806315739b0014610046578063831abd4414610046578063ae25331c1461006b575b600080fd5b61005961005436600461041f565b61007e565b60405190815260200160405180910390f35b610059610079366004610460565b610093565b600061008b848484610363565b949350505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401608060405180830381865afa1580156100e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101059190610499565b90506000808573ffffffffffffffffffffffffffffffffffffffff1663a5ea11da6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610155573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610179919061053f565b5050915091508573ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ee9190610593565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036102775760608301516102359063ffffffff84166105e6565b83602001518263ffffffff16856040015161025091906105e6565b61025a91906105e6565b6102649190610623565b8351610270919061065e565b93506102ca565b604083015161028c9063ffffffff83166105e6565b835160608501516102a49063ffffffff8616906105e6565b6102ae91906105e6565b6102b89190610623565b83602001516102c7919061065e565b93505b8473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103399190610676565b610344906012610699565b61034f90600a6107de565b61035990856105e6565b9695505050505050565b6000806103708585610093565b905060008573ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e391906107ed565b9050806103f085846105e6565b6103599190610623565b73ffffffffffffffffffffffffffffffffffffffff8116811461041c57600080fd5b50565b60008060006060848603121561043457600080fd5b833561043f816103fa565b9250602084013561044f816103fa565b929592945050506040919091013590565b6000806040838503121561047357600080fd5b823561047e816103fa565b9150602083013561048e816103fa565b809150509250929050565b6000608082840312156104ab57600080fd5b6040516080810181811067ffffffffffffffff821117156104f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b805163ffffffff8116811461053a57600080fd5b919050565b6000806000806080858703121561055557600080fd5b61055e85610526565b935061056c60208601610526565b925061057a60408601610526565b915061058860608601610526565b905092959194509250565b6000602082840312156105a557600080fd5b81516105b0816103fa565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561061e5761061e6105b7565b500290565b600082610659577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115610671576106716105b7565b500190565b60006020828403121561068857600080fd5b815160ff811681146105b057600080fd5b600060ff821660ff8416808210156106b3576106b36105b7565b90039392505050565b600181815b8085111561071557817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156106fb576106fb6105b7565b8085161561070857918102915b93841c93908002906106c1565b509250929050565b60008261072c575060016107d8565b81610739575060006107d8565b816001811461074f576002811461075957610775565b60019150506107d8565b60ff84111561076a5761076a6105b7565b50506001821b6107d8565b5060208310610133831016604e8410600b8410161715610798575081810a6107d8565b6107a283836106bc565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156107d4576107d46105b7565b0290505b92915050565b60006105b060ff84168361071d565b6000602082840312156107ff57600080fd5b505191905056fea2646970667358221220faa1dd1c9a46693c87ad20e6156e4c78fddb073b815a879802b6be768a9cde0464736f6c634300080e0033";

export class WeightedPairPricer__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<WeightedPairPricer> {
    return super.deploy(overrides || {}) as Promise<WeightedPairPricer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): WeightedPairPricer {
    return super.attach(address) as WeightedPairPricer;
  }
  connect(signer: Signer): WeightedPairPricer__factory {
    return super.connect(signer) as WeightedPairPricer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WeightedPairPricerInterface {
    return new utils.Interface(_abi) as WeightedPairPricerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WeightedPairPricer {
    return new Contract(address, _abi, signerOrProvider) as WeightedPairPricer;
  }
}
